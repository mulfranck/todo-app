/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const projectFactory = (projectName) => {\n    const list = {};\n    let len = 0;\n\n    return {list, len}\n}\n\nlet todoList = {};\n\ntodoList.__proto__.addInProj = function(projectName, task) {\n        task.projectName = projectName;\n        console.log(task);\n        this.list[task.id] = task;\n        this.len++;\n    }\n\n    todoList.__proto__.rmTask = function(project, taskId) {\n        if (taskId in this[project].list) {\n            delete this[project].list[taskId];\n        }\n        return this[project].list;\n    }\n\n    todoList.__proto__.toggle = function (taskid) {\n        this.list[taskid].checked != this.list[taskId].checked;\n        return list[taskid].checked;\n    }\n\n// This is the overall todo list\ntodoList.__proto__.addProject = function (projectName) {\n    this[projectName] = projectFactory(projectName);\n}\n\n// instantiating the overall list with a default project\ntodoList.default = projectFactory('default');\n\n/**************** GENERAL FUNCTIONS *******************/ \nconst cte = (tag, cls) => {\n    const el = document.createElement(tag);\n    cls ? el.classList.add(cls) : null;\n    return el;\n}\nconst addChild = (parent, child) => {\n    parent.appendChild(child);\n    return parent;\n}\n\nconst createTodoContainer = ({projectName, title, checked, id, dueDate, priority}) => {\n    // create an article container for the todo\n    // with title and id\n    const $itemEl = cte('article')\n    $itemEl.setAttribute('class', `t-items${checked? ' done':''}`);\n    $itemEl.setAttribute('data-key', id)\n    $itemEl.setAttribute('data-p-name', projectName);\n\n    const $rightGrpEl = cte('div', 'right-grp');\n    const $leftGrpEl = cte('div', 'left-grp');\n\n    const $inputCheckerEl = cte('input', 't-complete');\n    const $titleEl = cte('p', 't-title');\n    const $editEl = cte('i',);\n    const $detailEl = cte('i', 't-details');\n    const $deleteEl = cte('i');\n\n    $inputCheckerEl.setAttribute('type', 'checkbox')\n    $detailEl.setAttribute('class', 'fa fa-info t-details')\n    $editEl.setAttribute('class', 'fa fa-edit t-edit')\n    $deleteEl.setAttribute('class', 'fa fa-delete t-delete')\n    $deleteEl.setAttribute('id', 't-delete') //to acces from delete method\n    $titleEl.innerText = title;\n    $deleteEl.innerHTML = '&times;'\n\n    addChild($rightGrpEl, $inputCheckerEl);\n    addChild($rightGrpEl, $titleEl);\n    addChild($leftGrpEl, $editEl);\n    addChild($leftGrpEl, $detailEl);\n    addChild($leftGrpEl, $deleteEl);\n\n    addChild($itemEl, $rightGrpEl);\n    addChild($itemEl, $leftGrpEl);\n    return $itemEl;\n}\n\n\n/**************** COLLECTING DOM ELEMENTS *******************/ \nconst $adderBtn = document.querySelector('#adder');\nconst $adderModal = document.querySelector('#t-adder');\nconst $projectForm = document.querySelector('#p-adder-form');\nconst $todoForm = document.forms[1];\nconst $selectOption = document.querySelector('#projects');\n\nconst $todoListHolder = document.getElementById('t-list');\nconst $todoProjectHolder = document.getElementById('p-list');\nconst $deleteBtn = document.getElementById('t-delete');\nconst $projectAdderBtn = document.getElementById('add-project');\nconst $projectAdderFormTogger = document.getElementById('project-adder-form');\n\n\n// Create a todo item object\nconst todoFact = (title, priority, dueDate) => {\n    return {title, priority, dueDate, checked: false, id: Date.now()}\n}\n\n\nconst addTodo = (project, title, priority, dueDate) => {\n    //create the todo and give it to todo\n    const todo = (todoFact(title, priority, dueDate))\n    // select the project form the list of todoes and add this todo item to it.\n    todoList[project].addInProj(project, todo);\n\n    setStorage();\n    // and render the item on the dom\n    renderTodo(todo);\n}\n\nconst toggleDone = (project, todoId) => {\n    // Toggle the Done status and return true or false\n   return todoList[project].toggle(todoId);\n}\n\nconst deleteTodo = (project, todoId, domEl) => {\n    todoList.rmTask(project, todoId) //remove task from project passed\n    domEl.remove(); //remove from the dom\n}\n\nconst renderTodo = (todo) => {\n    addChild($todoListHolder, createTodoContainer(todo))\n}\n\n/**************** STORAGE MANAGING *******************/ \n\nconst setStorage = () => {\n    // Stringify the todoes \n    let toStore = Object.assign({}, todoList);\n    const jsonIt = JSON.stringify(toStore);\n    \n    // add the stringify object to the projects name object in the storage\n    sessionStorage.setItem('todoList', jsonIt)\n}\nconst getTodoesFromStorage = () => {\n    let todoes = sessionStorage.getItem('todoList')\n    return todoes;\n}\nconst populateTodoList = (todoes) => {\n    for (todo in todoes) {\n        if (todoes.hasOwnProperty(todo)){\n            todoList[todo] = todoes[todo];\n        }\n    } \n}\nconst populateDom = (todoes) => {\n    for (todo in todoes) {\n        // Allow only the direct properties\n        if (todoes.hasOwnProperty(todo)){\n            $selectOption.firstChild.remove()\n            $selectOption.innerHTML += `<option value=${todo}>${todo}</option>`;\n            for (aTodo in todoes[todo].list) {\n                if (todoes[todo].list.hasOwnProperty(aTodo))\n                // add dom element to the dom\n                renderTodo(todoes[todo].list[aTodo])\n            }\n        }\n    }\n}\n\n\nlet $todo = document.querySelector('.todo')\nlet $progress = document.querySelector('.in-progress');\nlet $tabHeader = document.querySelectorAll('.tab-link');\nlet $h3 = document.querySelectorAll('.list-container h3');\nlet navIcon = document.querySelector('.nav-icon');\n\n\n\n\n/**************** EVENT LISTENERS *******************/ \n\n// if the screen width on load is less than 650px hide all the headers\nwindow.addEventListener('load', (e) => {\n    if (e.currentTarget.innerWidth < 650) {\n        $h3.forEach(h3 => h3.style.visibility = 'hidden');\n        \n        $todo.style.display = 'block';\n        $progress.style.display = 'none';\n        $tabHeader[0].classList.add('active');\n    }\n})\n$tabHeader.forEach(tabLink  => {\n    //for each of the tablink open its tabcontent and close the other\n    tabLink.addEventListener('click', e => {\n        if (e.target.textContent === 'Todo') {\n            $todo.style.display = 'block'\n            $progress.style.display = 'none'\n            $tabHeader[0].classList.toggle('active')\n            $tabHeader[1].classList.toggle('active')\n        }\n        if (e.target.textContent === ('In Progress')) {\n            $todo.style.display = 'none'\n            $progress.style.display = 'block'\n            $tabHeader[1].classList.toggle('active')\n            $tabHeader[0].classList.toggle('active')\n\n        }\n    })\n});\n\nwindow.addEventListener('resize', e => {\n    if (e.currentTarget.innerWidth > 650) {\n        $todo.style.display = $progress.style.display = 'block'\n        $h3.forEach(h3 => h3.style.visibility = 'visible');\n    } else {\n        $h3.forEach(h3 => h3.style.visibility = 'hidden');\n        $progress.style.display = 'none'\n    }\n})\n\n// change nav icon on mouse over to a cross\nnavIcon.addEventListener('click', e => {\n    navIcon.firstChild.classList.remove('fa-bars');\n    navIcon.firstChild.classList.add('fa-times');\n    document.querySelector('.control-panel').classList.toggle('show-nav')\n})\n// remove the aside if a the is a click anywhere\ndocument.querySelector('.overlay').addEventListener('click', () => {\n    navIcon.firstChild.classList.add('fa-bars');\n    navIcon.firstChild.classList.remove('fa-times');\n    document.querySelector('.control-panel').classList.toggle('show-nav')\n} )\n\n\n$adderBtn.addEventListener('click', () => {\n    $adderModal.classList.toggle('hide')\n    $adderBtn.style.backgroundColor = 'rgb(214, 93, 71)'\n    $adderBtn.disabled = true; //mk the addBtn unclickable\n})\n\n$projectAdderBtn.addEventListener('click', () => {\n    $projectAdderBtn.classList.toggle('hide');\n    $projectAdderFormTogger.classList.toggle('hide');\n})\n\n$todoForm.addEventListener('submit', e => {\n    e.preventDefault();\n    const title = $todoForm.elements[0];\n    const project = $todoForm.elements[1];\n    const priority = $todoForm.elements[2];\n    const dueDate = $todoForm.elements[3];\n    if (e.submitter.textContent === 'Add') {\n        // submit only if the submitter is the add btn\n        if (title.value !== '' && dueDate.value !== '' && priority.value !== ''){\n            addTodo(project.value, title.value, priority.value, dueDate.value);\n            title.value = priority.value = '';\n            dueDate.value = '';\n            $adderModal.classList.toggle('hide');\n            $adderBtn.style.backgroundColor = ''\n            $adderBtn.disabled = false; //when submited mk adderbtn clickable\n        } else {\n            alert('The fields most not be empty!')\n        }\n    }\n    if (e.submitter.textContent === 'Cancel'){\n        $adderModal.classList.toggle('hide');\n        $adderBtn.style.backgroundColor = ''\n        $adderBtn.disabled = false;\n        \n    }\n})\n$projectForm.addEventListener('submit', (e) => {\n    e.preventDefault();\n    if (e.submitter.textContent === 'Add') {\n        // Collect the project name\n        let projectName = ($projectForm.elements[0].value)\n\n        // Add project to the overall todo list.\n        todoList.addProject(projectName);\n        // render the project name to the dom\n        let projectBtnEl = cte('button', 'project');\n        projectBtnEl.setAttribute('id', projectName);\n        projectBtnEl.innerText = projectName;\n\n        addChild($todoProjectHolder, projectBtnEl)\n        // Add the project name to the select option to the todo form elements.\n        $selectOption.innerHTML += `<option value=${projectName}>${projectName}</option>`;\n\n        // remove the content of the form\n        $projectForm.elements[0].value = '';\n\n        // Close the adder form and return the add btn\n        $projectAdderBtn.classList.toggle('hide');\n        $projectAdderFormTogger.classList.toggle('hide');\n\n    } else {\n        // remove the content of the form\n        $projectForm.elements[0].value = '';\n        // Close the adder form and return the add btn\n        $projectAdderBtn.classList.toggle('hide');\n        $projectAdderFormTogger.classList.toggle('hide');\n    }\n})\n\n$todoListHolder.addEventListener('click', (e) => {\n    let attribute = e.target.getAttribute('id');\n    let id = e.target.parentNode.parentNode.dataset.key;\n    let project = e.target.parentNode.parentNode.dataset.pName;\n    if (attribute === 't-delete'){\n        deleteTodo(project, id, e.target.parentNode.parentNode)\n        setStorage(todoList);\n    }\n    console.log(attribute)\n})\n\nwindow.addEventListener('load', e => {\n    let t = JSON.parse(getTodoesFromStorage());\n    populateTodoList(t)\n    populateDom(todoList);\n})\n\n\n\n//# sourceURL=webpack://todo-app/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;